//							Iuri Silva Castro
//			Mestrando em Engenharia Eletrica - PPGEE
//			Universidade Federal de Minas Gerais - UFMG
//									2º/2017




module ULA ();





endmodule



module RegisterBank32x16bit ( AddrRegA, AddrRegB, AddrWriteReg, Data, WEN, CLK, RST, RegA, RegB );

input WEN, CLK, RST;			// Sinais de controle
input [15:0] Data;			// Barramento de dados 16-bit
input [4:0] AddrRegA;		// Endereço do registrador A para leitura
input [4:0] AddrRegB;		// Endereço do registrador B para leitura
input [4:0] AddrWriteReg;	// Endereço do registrador a ser escrito
output reg [15:0] RegA;		// Valor do registrador A
output reg [15:0] RegB;		// Valor do registrador B

reg [15:0] RegBank[31:0];

integer i;

always @( posedge CLK ) begin
	if ( RST )
		for ( i = 0; i < 32; i = i + 1) begin
			RegBank[i] <= 16'h0000;
		end
	else
		if ( WEN )
			RegBank[AddrWriteReg] <= Data;
		else begin
			RegA <= RegBank[AddrRegA];
			RegB <= RegBank[AddrRegB];
		end
end



endmodule
