# Esse programa calcula o resto da divisão de 1024 (R1) por 100 (R2) e
# armazena o valor em R3. O valor esperado de R3 ao fim do programa é 24 (0000 0000 0001 1000).

ADDI R1, 8, R0
ADDI R2, 8, R0
MUL  R3, R2, R1
GLO  R1, -, -      # R1 = 64.
ADDI R2, 15, R0    # R2 = 15.
ADDI R2, 1, R2     # R2 = 16.
MUL  R1, R1, R2    # 64 * 16 = 1024.
GLO  R1, -, -      # R1 = 1024.
ADDI R2, 10, R0    # R2 = 10.
MUL  R2, R2, R2    # 10 * 10.
GLO  R2, -, -      # R2 = 100.
ADDI R3, 0, R1     # R3 = 1024.
ADDI R4, 0, R0     # R4 = 0.
ADDI R6, 15, R0    # R6 = 15.
ADDI R6, 8, R6     # R6 = 23.
ADDI R4, 1, R4     # R4 = R4 + 1
SUB  R3, R2, R3    # R3 = R3 - R2.
SLTI R5, 9, R4     # R5 = R4 > 9
BEZ   -, R6, R5    # If (R5 == 0) { jump to R6 (23) }
====================================================================================================

#loop simples para adicionar 1 em R1 4 vezes. No final R1=5 já que ele começa em 1.
0 ADDI R1, 1, R0
1 ADDI R2, 4, R0
2 ADDI R6, 10, R0
3 BEZ -,R6,R2
4 ADDI R1,1,R1
5 SUBI R2,1,R2 
6 J 3
====================================================================================================
***** 1
0   ADDI R5,1,R0
1   ADDI R7,13,R0
2   MULL R6,R5,R7
3   GLO R8,-,-
4   ADD R1,R11,R0
5   ADD R2,R12,R0
6   SUB R3,R1,R2
7   AND R3,R9,R3 #Se R3 > 0, R2<R1
8   SLTI R4,0,R3 #Se R2<R1, R4=1, troca
9   BEZ -,R8,R4 #Se R4=0, não troca
10  ADD R3,R11,R0
11  ADD R11,R12,R0
12  ADD R12,R3,R0
* 2
13  ADDI R5,1,R5
14  ADDI R7,13,R0
15  MULL R6,R5,R7
16  GLO R8,-,-
17  ADD R1,R11,R0
18  ADD R2,R13,R0
19  SUB R3,R1,R2
20  AND R3,R9,R3 #Se R3 > 0, R2<R1
21  SLTI R4,0,R3
22  BEZ -,R8,R4
23  ADD R3,R11,R0
24  ADD R11,R13,R0
25  ADD R13,R3,R0
* 3
26  ADDI R5,1,R5
27  ADDI R7,13,R0
28  MULL R6,R5,R7
29  GLO R8,-,-
30  ADD R1,R11,R0
31  ADD R2,R14,R0
32  SUB R3,R1,R2
33  AND R3,R9,R3 #Se R3 > 0, R2<R1
34  SLTI R4,0,R3
35  BEZ -,R8,R4
36  ADD R3,R11,R0
37  ADD R11,R14,R0
38  ADD R14,R3,R0
* 4
39  ADDI R5,1,R5
40  ADDI R7,13,R0
41  MULL R6,R5,R7
42  GLO R8,-,-
43  ADD R1,R11,R0
44  ADD R2,R15,R0
45  SUB R3,R1,R2
46  AND R3,R9,R3 #Se R3 > 0, R2<R1
47  SLTI R4,0,R3
48  BEZ -,R8,R4
49  ADD R3,R11,R0
50  ADD R11,R15,R0
51  ADD R15,R3,R0
**** 5
13  ADDI R5,1,R5
14  ADDI R7,13,R0
15  MULL R6,R5,R7
16  GLO R8,-,-
17  ADD R1,R12,R0
18  ADD R2,R13,R0
19  SUB R3,R1,R2
20  AND R3,R9,R3 #Se R3 > 0, R2<R1
21  SLTI R4,0,R3
22  BEZ -,R8,R4
23  ADD R3,R12,R0
24  ADD R12,R13,R0
25  ADD R13,R3,R0
* 6
26  ADDI R5,1,R5
27  ADDI R7,13,R0
28  MULL R6,R5,R7
29  GLO R8,-,-
30  ADD R1,R12,R0
31  ADD R2,R14,R0
32  SUB R3,R1,R2
33  AND R3,R9,R3 #Se R3 > 0, R2<R1
34  SLTI R4,0,R3
35  BEZ -,R8,R4
36  ADD R3,R12,R0
37  ADD R12,R14,R0
38  ADD R14,R3,R0
* 7
39  ADDI R5,1,R5
40  ADDI R7,13,R0
41  MULL R6,R5,R7
42  GLO R8,-,-
43  ADD R1,R12,R0
44  ADD R2,R15,R0
45  SUB R3,R1,R2
46  AND R3,R9,R3 #Se R3 > 0, R2<R1
47  SLTI R4,0,R3
48  BEZ -,R8,R4
49  ADD R3,R12,R0
50  ADD R12,R15,R0
51  ADD R15,R3,R0
**** 8
13  ADDI R5,1,R5
14  ADDI R7,13,R0
15  MULL R6,R5,R7
16  GLO R8,-,-
17  ADD R1,R13,R0
18  ADD R2,R14,R0
19  SUB R3,R1,R2
20  AND R3,R9,R3 #Se R3 > 0, R2<R1
21  SLTI R4,0,R3
22  BEZ -,R8,R4
23  ADD R3,R13,R0
24  ADD R13,R14,R0
25  ADD R14,R3,R0
* 9
26  ADDI R5,1,R5
27  ADDI R7,13,R0
28  MULL R6,R5,R7
29  GLO R8,-,-
30  ADD R1,R13,R0
31  ADD R2,R15,R0
32  SUB R3,R1,R2
33  AND R3,R9,R3 #Se R3 > 0, R2<R1
34  SLTI R4,0,R3
35  BEZ -,R8,R4
36  ADD R3,R13,R0
37  ADD R13,R15,R0
38  ADD R15,R3,R0
***** 10
26  ADDI R5,1,R5
27  ADDI R7,13,R0
28  MULL R6,R5,R7
29  GLO R8,-,-
30  ADD R1,R14,R0
31  ADD R2,R15,R0
32  SUB R3,R1,R2
33  AND R3,R9,R3 #Se R3 > 0, R2<R1
34  SLTI R4,0,R3
35  BEZ -,R8,R4
36  ADD R3,R14,R0
37  ADD R14,R15,R0
38  ADD R15,R3,R0

====================================================================================================
# Para testar no modelsim.
vsim -L altera_mf_ver -L cycloneiv_ver Microprocessor
add wave -position insertpoint  \
sim:/Microprocessor/opA \
sim:/Microprocessor/opB \
sim:/Microprocessor/opC \
sim:/Microprocessor/opCode
add wave -position insertpoint  \
sim:/Microprocessor/PC
add wave -position insertpoint  \
sim:/Microprocessor/ExeWBBuffer_Res
add wave -position insertpoint  \
sim:/Microprocessor/CLK
add wave -position insertpoint  \
sim:/Microprocessor/RST
force -freeze sim:/Microprocessor/CLK 1 0, 0 {50 ps} -r 100
force -freeze sim:/Microprocessor/RST 1 0
#force -freeze sim:/Microprocessor/PC 0000000000011100 0
run
noforce sim:/Microprocessor/PC
force -freeze sim:/Microprocessor/RST 0 0
run
mem load -filltype value -filldata {1000000000000000 } -fillradix symbolic /Microprocessor/regBank/RegBank(9)
mem load -filltype value -filldata {0000000000000100 } -fillradix symbolic /Microprocessor/regBank/RegBank(11)
mem load -filltype value -filldata {0000000000000011 } -fillradix symbolic /Microprocessor/regBank/RegBank(12)
mem load -filltype value -filldata {0000000000000010 } -fillradix symbolic /Microprocessor/regBank/RegBank(13)
mem load -filltype value -filldata {0000000000000101 } -fillradix symbolic /Microprocessor/regBank/RegBank(14)
mem load -filltype value -filldata {0000000000000001 } -fillradix symbolic /Microprocessor/regBank/RegBank(15)
